[package]
name = "xtest-data"
version = "1.0.0-beta.4"
description = "Fetch auxiliary test data when testing published crates"
license = "MIT OR Apache-2.0 OR Zlib"
edition = "2018"
rust-version = "1.53"
repository = "https://github.com/HeroicKatora/xtest-data"

# As part of the self-test, do not make data files part of the crate archive.
# These are accessible in the integration tests by the library using itself.
exclude = [".github", "tests/data.zip"]

[features]
bin-xtask = [
  "dep:clap",
  "dep:serde",
  "dep:tempfile",
  "dep:tinytemplate",
  "dep:toml",
  "dep:ureq",
]

[[bin]]
path = "src/bin/xtask/main.rs"
name = "xtask"
required-features = ["bin-xtask"]

[dependencies.tinyjson]
version = "2"
[dependencies.fs2]
version = "0.4.3"
[dependencies.which]
version = "4.2"
[dependencies.nanorand]
version = "0.6.1"
default-features = false
features = ["std", "tls", "wyrand"]

[dependencies.clap]
version = "4"
features = ["derive"]
optional = true
[dependencies.serde]
version = "1"
features = ["derive"]
optional = true
[dependencies.tempfile]
version = "3"
optional = true
[dependencies.tinytemplate]
version = "1"
optional = true
[dependencies.toml]
version = "0.5"
optional = true
[dependencies.ureq]
version = "2.5"
optional = true

# See `Readme.md` on meaning.
#
# This pre-configured table ensures that other tools can read the information
# to fetch the archive for us. For example, a packaging-tool such as Debian's
# standard Rust tooling may automatically generate test deps and archives.
#
# Note: the `xtask` will be parsing this, *NOT* the xtest-data crate itself.
# We merely define some standard options.
[package.metadata.xtest-data]
# Method for archiving the pack data.
pack-archive = "tar:gz"
# URL template from which to fetch packed file during testing.
pack-artifact = "{repository}/releases/download/v{version}/xtest-data.tar.gz"
# Relative path to export data to, and expect pack objects in.
pack-objects = "target/xtest-data-pack"


[workspace]
members = ["."]
